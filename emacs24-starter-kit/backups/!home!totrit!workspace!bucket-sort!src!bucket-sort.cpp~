#include <assert.h>
#include <limits.h>
#include <time.h>

#include <algorithm>
#include <iostream>
#include <vector>

class Node {
	int value;
	Node *next:NULL;
	
}

void bucket_sort(int array[], int len)
{
	const int BUCKET_NUM = 10;
	Node *bucket[] = new *Node[BUCKET_NUM];
	int max = INT_MIN;
	for (int i = 0; i < len; i ++) {
		if (array[i] > max) {
			max = array[i];
		}
	}
	const int BUCKET_SIZE = max / BUCKET_NUM;
	for (int i = 0; i < BUCKET_NUM; i ++) {
		bucket[i] = NULL;
	}
	for (int i = 0; i < len; i ++) {
		int bucket_index = array[i] / BUCKET_SIZE;
		Node *new_node = new Node();
		new_node->value = array[i];
		Node *insert_pos = bucket[bucket_index];
		if (bucket[bucket_index] != NULL) {
			while (insert_pos->next != NULL && insert_pos->next->value < array[i]) {
				insert_pos = insert_pos->next;

			}
			Node *next = insert_pos->next;
			insert_pos->next = new_node;
			new_node->next = next;
		} else {
			bucket[bucket_index] = new_node;
		}

	}
}

int main()
{
	srand(time(NULL));
	const int ARRAY_LEN = 1000;
	const int INT_RANGE = 100000;
	int *array = new int[ARRAY_LEN];
	for (int i = 0; i < ARRAY_LEN; i ++) {
		array[i] = rand() % INT_RANGE;
	}

	// Sort in standard way
	std::vector<int> v(array, array + ARRAY_LEN);
	std::sort(v.begin(), v.end());

	// Sort in our way
	bucket_sort(array, ARRAY_LEN);

	// Compare them
	for (int i = 0; i < ARRAY_LEN; i ++)
	{
		//	std::cout << array[i] << ", ";
		assert(v[i] == array[i]);
	}
}
